{"version":3,"file":"editor.js","sourceRoot":"","sources":["editor.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,AfterViewInit,Input,Output,EventEmitter,ContentChild,OnChanges,forwardRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Header} from '../common/shared'\nimport {DomHandler} from '../dom/domhandler';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\ndeclare var Quill: any;\n\nexport const EDITOR_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Editor),\n  multi: true\n};\n\n@Component({\n    selector: 'p-editor',\n    template: `\n        <div [ngClass]=\"'ui-widget ui-editor-container ui-corner-all'\" [class]=\"styleClass\">\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"toolbar\">\n                <ng-content select=\"header\"></ng-content>\n            </div>\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"!toolbar\">\n                <span class=\"ql-formats\">\n                    <select class=\"ql-header\">\n                      <option value=\"1\">Heading</option>\n                      <option value=\"2\">Subheading</option>\n                      <option selected>Normal</option>\n                    </select>\n                    <select class=\"ql-font\">\n                      <option selected>Sans Serif</option>\n                      <option value=\"serif\">Serif</option>\n                      <option value=\"monospace\">Monospace</option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-bold\"></button>\n                    <button class=\"ql-italic\"></button>\n                    <button class=\"ql-underline\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <select class=\"ql-color\"></select>\n                    <select class=\"ql-background\"></select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-list\" value=\"ordered\"></button>\n                    <button class=\"ql-list\" value=\"bullet\"></button>\n                    <select class=\"ql-align\">\n                        <option selected></option>\n                        <option value=\"center\"></option>\n                        <option value=\"right\"></option>\n                        <option value=\"justify\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-link\"></button>\n                    <button class=\"ql-image\"></button>\n                    <button class=\"ql-code-block\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-clean\"></button>\n                </span>\n            </div>\n            <div class=\"ui-editor-content\" [ngStyle]=\"style\"></div>\n        </div>\n    `,\n    providers: [DomHandler,EDITOR_VALUE_ACCESSOR]\n})\nexport class Editor implements AfterViewInit,ControlValueAccessor {\n        \n    @Output() onTextChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onSelectionChange: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChild(Header) toolbar;\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n    \n    @Input() placeholder: string;\n    \n    @Input() readOnly: boolean;\n    \n    @Input() formats: string[];\n    \n    value: string;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    quill: any;\n    \n    constructor(public el: ElementRef, public domHandler: DomHandler) {}\n\n    ngAfterViewInit() {\n        let editorElement = this.domHandler.findSingle(this.el.nativeElement ,'div.ui-editor-content'); \n        let toolbarElement = this.domHandler.findSingle(this.el.nativeElement ,'div.ui-editor-toolbar'); \n        \n        this.quill = new Quill(editorElement, {\n          modules: {\n              toolbar: toolbarElement\n          },\n          placeholder: this.placeholder,\n          readOnly: this.readOnly,\n          theme: 'snow',\n          formats: this.formats\n        });\n                \n        if(this.value) {\n            this.quill.pasteHTML(this.value);\n        }\n        \n        this.quill.on('text-change', (delta, source) => {\n            let html = editorElement.children[0].innerHTML;\n            let text = this.quill.getText();\n            if(html == '<p><br></p>') {\n                html = null;\n            }\n\n            this.onTextChange.emit({\n                htmlValue: html,\n                textValue: text,\n                delta: delta,\n                source: source\n            });\n            \n            this.onModelChange(html);\n        });\n        \n        this.quill.on('selection-change', (range, oldRange, source) => {\n            this.onSelectionChange.emit({\n                range: range,\n                oldRange: oldRange,\n                source: source\n            });\n        });\n    }\n        \n    writeValue(value: any) : void {\n        this.value = value;\n                \n        if(this.quill) {\n            if(value)\n                this.quill.pasteHTML(value);\n            else\n                this.quill.setText('');\n        }\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Editor],\n    declarations: [Editor]\n})\nexport class EditorModule { }"]}
{"version":3,"file":"terminal.js","sourceRoot":"","sources":["terminal.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAqG,eAAe,CAAC,CAAA;AACrH,sBAA0B,gBAAgB,CAAC,CAAA;AAC3C,uBAA2B,iBAAiB,CAAC,CAAA;AAC7C,2BAAyB,mBAAmB,CAAC,CAAA;AAsB7C;IAsBI,kBAAmB,EAAc,EAAS,UAAsB;QAA7C,OAAE,GAAF,EAAE,CAAY;QAAS,eAAU,GAAV,UAAU,CAAY;QAZtD,mBAAc,GAAsB,IAAI,mBAAY,EAAE,CAAC;QAEvD,YAAO,GAAsB,IAAI,mBAAY,EAAE,CAAC;QAE1D,aAAQ,GAAU,EAAE,CAAC;IAQ8C,CAAC;IAEpE,kCAAe,GAAf;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC;IAED,qCAAkB,GAAlB;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC;YACvD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAClC,CAAC;IACL,CAAC;IAGD,sBAAI,8BAAQ;aAAZ,UAAa,KAAa;YACtB,EAAE,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC;gBACP,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACzD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YACjC,CAAC;QACL,CAAC;;;OAAA;IAED,gCAAa,GAAb,UAAc,KAAoB;QAC9B,EAAE,CAAA,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,aAAa,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;YACjE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QACtB,CAAC;IACL,CAAC;IAED,wBAAK,GAAL,UAAM,OAAoB;QACtB,OAAO,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;IAnDD;QAAC,YAAK,EAAE;;oDAAA;IAER;QAAC,YAAK,EAAE;;4CAAA;IAER;QAAC,YAAK,EAAE;;2CAAA;IAER;QAAC,YAAK,EAAE;;gDAAA;IAER;QAAC,aAAM,EAAE;;oDAAA;IAET;QAAC,aAAM,EAAE;;6CAAA;IAuBT;QAAC,YAAK,EAAE;;;4CAAA;IAvDZ;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,YAAY;YACtB,QAAQ,EAAE,m1BAeT;YACD,SAAS,EAAE,CAAC,uBAAU,CAAC;SAC1B,CAAC;;gBAAA;IAwDF,eAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,gBAAQ,WAuDpB,CAAA;AAOD;IAAA;IAA8B,CAAC;IAL/B;QAAC,eAAQ,CAAC;YACN,OAAO,EAAE,CAAC,qBAAY,EAAC,mBAAW,CAAC;YACnC,OAAO,EAAE,CAAC,QAAQ,CAAC;YACnB,YAAY,EAAE,CAAC,QAAQ,CAAC;SAC3B,CAAC;;sBAAA;IAC4B,qBAAC;AAAD,CAAC,AAA/B,IAA+B;AAAlB,sBAAc,iBAAI,CAAA","sourcesContent":["import {NgModule,Component,AfterViewInit,AfterViewChecked,Input,Output,EventEmitter,ElementRef} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from '../dom/domhandler';\n\n@Component({\n    selector: 'p-terminal',\n    template: `\n        <div [ngClass]=\"'ui-terminal ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"focus(in)\">\n            <div *ngIf=\"welcomeMessage\">{{welcomeMessage}}</div>\n            <div class=\"ui-terminal-content\">\n                <div *ngFor=\"let command of commands\">\n                    <span>{{prompt}}</span>\n                    <span class=\"ui-terminal-command\">{{command.text}}</span>\n                    <div>{{command.response}}</div>\n                </div>\n            </div>\n            <div>\n                <span class=\"ui-terminal-content-prompt\">{{prompt}}</span>\n                <input #in type=\"text\" [(ngModel)]=\"command\" class=\"ui-terminal-input\" autocomplete=\"off\" (keydown)=\"handleCommand($event)\" autofocus>\n            </div>\n        </div>\n    `,\n    providers: [DomHandler]\n})\nexport class Terminal implements AfterViewInit,AfterViewChecked {\n\n    @Input() welcomeMessage: string;\n\n    @Input() prompt: string;\n        \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n    \n    @Output() responseChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() handler: EventEmitter<any> = new EventEmitter();\n        \n    commands: any[] = [];\n    \n    command: string;\n    \n    container: Element;\n    \n    commandProcessed: boolean;\n    \n    constructor(public el: ElementRef, public domHandler: DomHandler) {}\n    \n    ngAfterViewInit() {\n        this.container = this.domHandler.find(this.el.nativeElement, '.ui-terminal')[0];\n    }\n    \n    ngAfterViewChecked() {\n        if(this.commandProcessed) {\n            this.container.scrollTop = this.container.scrollHeight;\n            this.commandProcessed = false;\n        }\n    }\n                \n    @Input()\n    set response(value: string) {\n        if(value) {\n            this.commands[this.commands.length - 1].response = value;\n            this.commandProcessed = true;\n        }\n    }\n    \n    handleCommand(event: KeyboardEvent) {\n        if(event.keyCode == 13) {\n            this.commands.push({text: this.command});                    \n            this.handler.emit({originalEvent: event, command: this.command});\n            this.command = '';\n        }\n    }\n    \n    focus(element: HTMLElement) {\n        element.focus();\n    }\n    \n}\n\n@NgModule({\n    imports: [CommonModule,FormsModule],\n    exports: [Terminal],\n    declarations: [Terminal]\n})\nexport class TerminalModule { }"]}